{"version":3,"sources":["financial_table/financial_table.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","table","minWidth","fab","position","bottom","spacing","right","withZakat","monthlyBudget","years","balance","paidZakatOverYears","yearlyBudget","zakatToBePaid","createData","goal","monthly_budget","in_years","zakated","FinancialTable","classes","useState","open","setOpen","handleClose","rows","setRows","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","index","scope","TextField","type","placeholder","onChange","e","changedIndex","target","value","zakat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","total_budget","Dialog","onClose","aria-labelledby","DialogContent","autoFocus","id","label","fullWidth","DialogActions","Button","onClick","color","document","getElementById","push","Fab","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f835a6a7.chunk.js","sourcesContent":["import {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {TextField, Fab} from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {useState, Fragment} from \"react\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n    table: {\n        minWidth: 650,\n    },\n    fab: {\n        position: 'absolute',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}));\n\nfunction withZakat(monthlyBudget, years, balance = 0, paidZakatOverYears = 0) {\n    let yearlyBudget = monthlyBudget * 12;\n    if (--years >= 0) {\n        let zakatToBePaid = balance * 0.025;\n        return withZakat(monthlyBudget, years, yearlyBudget + balance - zakatToBePaid, paidZakatOverYears + zakatToBePaid);\n    } else {\n        return {balance, paidZakatOverYears};\n    }\n}\n\nfunction createData(goal, monthly_budget, in_years) {\n    let zakated = withZakat(monthly_budget, in_years);\n    return {goal, monthly_budget, in_years, \"zakat\": zakated.paidZakatOverYears, \"total_budget\": zakated.balance};\n}\n\nexport default function FinancialTable() {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const handleAdd = () => {\n        let goal = createData(document.getElementById(\"goal\").value, 0, 0);\n        rows.push(goal);\n        handleClose();\n    }\n    const [rows, setRows] = useState([]);\n\n    return (\n        <Fragment>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"goals table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Goal</TableCell>\n                            <TableCell align=\"right\">Monthly Budget</TableCell>\n                            <TableCell align=\"right\">Achieve in Years</TableCell>\n                            <TableCell align=\"right\">Zakat</TableCell>\n                            <TableCell align=\"right\">Total Budget</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map((row, index) => (\n                            <TableRow key={row.goal}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.goal}\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    <TextField type=\"number\" placeholder=\"Monthly Budget\" onChange={(e) => {\n                                        let changedIndex = index;\n                                        setRows(\n                                            rows.map((row, index) => {\n                                                if (index !== changedIndex) return row\n                                                return createData(row.goal, e.target.value || row.monthly_budget, row.in_years);\n                                            }));\n                                    }}/>\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    <TextField type=\"number\" placeholder=\"Achieve in years\" onChange={(e) => {\n                                        let changedIndex = index;\n                                        setRows(\n                                            rows.map((row, index) => {\n                                                if (index !== changedIndex) return row\n                                                return createData(row.goal, row.monthly_budget, e.target.value || row.in_years);\n                                            }));\n                                    }}/>\n                                </TableCell>\n                                <TableCell align=\"right\">{row.zakat.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                                <TableCell align=\"right\">{row.total_budget.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"add-goal\">\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        id=\"goal\"\n                        label=\"Goal\"\n                        type=\"text\"\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleAdd} color=\"primary\">\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Fab color=\"primary\" aria-label=\"add\" className={classes.fab} onClick={handleClickOpen}>\n                <AddIcon/>\n            </Fab>\n        </Fragment>\n    );\n}\n","import FinancialTable from \"./financial_table/financial_table\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FinancialTable></FinancialTable>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}