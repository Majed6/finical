{"version":3,"sources":["financial_table/recurring_expenses_collapse_table_row.js","financial_table/recurring_expenses_collapse.js","financial_table/financial_table_row.js","financial_table/financial_table.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","compact","width","RecurringExpensesCollapseTableRow","props","classes","TableRow","TableCell","align","TextField","placeholder","value","row","expense","onChange","e","onRowUpdate","target","index","FormGroup","times","className","type","Select","multiplier","MenuItem","cost","Number","parseFloat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","RecurringExpensesCollapse","useState","isTemplate","rows","setRows","newValue","changedIndex","changedCell","newTemplate","updateRows","map","concat","filter","Collapse","in","timeout","unmountOnExit","Box","margin","goal","Table","size","aria-label","TableHead","TableBody","collapsibleTable","paddingBottom","paddingTop","FinancialTableRow","collapsed","setCollapsed","collapsibleRow","hasRecurringExpenses","IconButton","onClick","zakat","total_budget","colSpan","table","minWidth","fab","position","bottom","spacing","right","withZakat","monthlyBudget","years","balance","paidZakatOverYears","yearlyBudget","zakatToBePaid","createData","monthly_budget","in_years","recurring_expenses","zakated","reduce","accumulator","recurring_expense","FinancialTable","showAddDialog","setShowAddDialog","handleClose","TableContainer","component","Paper","Dialog","open","onClose","aria-labelledby","DialogContent","autoFocus","id","label","fullWidth","FormControlLabel","control","Checkbox","name","color","DialogActions","Button","document","getElementById","checked","push","Fab","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.848700cb.chunk.js","sourcesContent":["import TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport {FormGroup, MenuItem, Select, TextField} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    compact: {width: \"100px\"},\n}));\n\nexport default function RecurringExpensesCollapseTableRow(props) {\n    const classes = useStyles();\n\n    return (\n        <TableRow>\n            <TableCell align=\"left\">\n                <TextField placeholder=\"Expense\" value={props.row.expense}\n                           onChange={(e) => props.onRowUpdate(e.target.value, props.index, \"expense\")}/>\n            </TableCell>\n            <TableCell align=\"left\">\n                <FormGroup row={true}>\n                    <TextField value={props.row.times} className={classes.compact} type=\"number\"\n                               placeholder=\"Times\"\n                               onChange={(e) => props.onRowUpdate(e.target.value, props.index, \"times\")}/>\n                    <Select value={props.row.multiplier}\n                            onChange={(e) => props.onRowUpdate(e.target.value, props.index, \"multiplier\")}>\n                        <MenuItem value={1}>Daily</MenuItem>\n                        <MenuItem value={30.436875}>Monthly (30 days)</MenuItem>\n                        <MenuItem value={365.25}>Yearly (365 days)</MenuItem>\n                    </Select>\n                </FormGroup>\n            </TableCell>\n            <TableCell align=\"left\">\n                <TextField value={props.row.cost} type=\"number\" placeholder=\"Cost\"\n                           onChange={(e) => props.onRowUpdate(e.target.value, props.index, \"cost\")}/>\n            </TableCell>\n            <TableCell align=\"right\">\n                {Number.parseFloat(props.row.cost / (props.row.multiplier / props.row.times) * 365.25 || 0)\n                    .toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2\n                    })}\n            </TableCell>\n        </TableRow>\n    )\n}\n","import {Box, Collapse} from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {useState} from \"react\";\nimport RecurringExpensesCollapseTableRow from \"./recurring_expenses_collapse_table_row\";\n\n\nexport default function RecurringExpensesCollapse(props) {\n    const [rows, setRows] = useState([{isTemplate: true, expense: '', times: '', multiplier: '', cost: ''}]);\n    const onRowUpdate = function (newValue, changedIndex, changedCell) {\n        let newTemplate = [];\n        let updateRows = rows.map((row, index) => {\n            if (index !== changedIndex) return row;\n            if (row.isTemplate) {\n                delete row.isTemplate;\n                newTemplate = [{isTemplate: true, expense: '', times: '', multiplier: '', cost: ''}];\n            }\n            row[changedCell] = newValue;\n            return row;\n        }).concat(newTemplate);\n\n        setRows(updateRows);\n        props.onRowUpdate(updateRows.filter(row => !row.isTemplate && row.times && row.multiplier && row.cost), props.row.index, 'recurring_expenses');\n    }\n\n    return (\n        <Collapse in={props.in} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n                <b>{props.row.goal} recurring expenses</b>\n                <Table size=\"small\" aria-label=\"recurring expenses\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Expense</TableCell>\n                            <TableCell align=\"left\">Recurrence</TableCell>\n                            <TableCell align=\"left\">Cost</TableCell>\n                            <TableCell align=\"right\">Yearly Total</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map((row, index) =>\n                            <RecurringExpensesCollapseTableRow key={index} row={row} index={index}\n                                                               onRowUpdate={onRowUpdate}/>\n                        )}\n                    </TableBody>\n                </Table>\n            </Box>\n        </Collapse>\n    );\n}\n","import TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport {Fragment, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport RecurringExpensesCollapse from \"./recurring_expenses_collapse\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    collapsibleTable: {paddingBottom: 0, paddingTop: 0},\n}));\n\nexport default function FinancialTableRow(props) {\n    const [collapsed, setCollapsed] = useState(true);\n    let row = {...props.row, \"index\": props.index};\n    const classes = useStyles();\n    let collapsibleRow = row.hasRecurringExpenses;\n    return (\n        <Fragment>\n            <TableRow>\n                <TableCell align=\"left\">\n                    {collapsibleRow ?\n                        <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setCollapsed(!collapsed)}>\n                            {collapsed ? <KeyboardArrowDownIcon/> : <KeyboardArrowUpIcon/>}\n                        </IconButton> : null\n                    }\n                </TableCell>\n                <TableCell align=\"left\">\n                    {row.goal}\n                </TableCell>\n                <TableCell align=\"left\">\n                    <TextField type=\"number\" placeholder=\"Monthly Budget\"\n                               onChange={(e) => props.onRowUpdate(e.target.value, row.index, \"monthly_budget\")}/>\n                </TableCell>\n                <TableCell align=\"left\">\n                    <TextField type=\"number\" placeholder=\"Achieve in years\"\n                               onChange={(e) => props.onRowUpdate(e.target.value, row.index, \"in_years\")}/>\n                </TableCell>\n                <TableCell align=\"right\">\n                    {row.zakat.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2\n                    })}\n                </TableCell>\n                <TableCell align=\"right\">\n                    {row.total_budget.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2\n                    })}\n                </TableCell>\n            </TableRow>\n            {collapsibleRow ?\n                <TableRow>\n                    <TableCell className={classes.collapsibleTable} colSpan={6}>\n                        <RecurringExpensesCollapse row={row} in={!collapsed} onRowUpdate={props.onRowUpdate}/>\n                    </TableCell>\n                </TableRow> : null\n            }\n        </Fragment>\n    );\n}\n","import {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {Checkbox, Fab, FormControlLabel, TextField} from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {Fragment, useState} from \"react\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Button from '@material-ui/core/Button';\nimport FinancialTableRow from \"./financial_table_row\";\n\nconst useStyles = makeStyles((theme) => ({\n    table: {\n        minWidth: 650,\n    },\n    fab: {\n        position: 'absolute',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}));\n\nfunction withZakat(monthlyBudget, years, balance = 0, paidZakatOverYears = 0) {\n    let yearlyBudget = monthlyBudget * 12;\n    if (--years >= 0) {\n        let zakatToBePaid = balance * 0.025;\n        return withZakat(monthlyBudget, years, yearlyBudget + balance - zakatToBePaid, paidZakatOverYears + zakatToBePaid);\n    } else {\n        return {balance, paidZakatOverYears};\n    }\n}\n\nfunction createData({\n                        hasRecurringExpenses = false,\n                        goal = \"\",\n                        monthly_budget = 0,\n                        in_years = 0,\n                        recurring_expenses = []\n                    }) {\n        let recurring_expenses_monthly_total = recurring_expenses.reduce((accumulator, recurring_expense) => {\n            let daily_cost = recurring_expense.cost / (recurring_expense.multiplier / recurring_expense.times);\n            return accumulator + (daily_cost * 30.436875);\n        }, 0);\n\n    let zakated = withZakat(monthly_budget - recurring_expenses_monthly_total, in_years);\n    return {\n        hasRecurringExpenses,\n        goal,\n        monthly_budget,\n        in_years,\n        \"zakat\": zakated.paidZakatOverYears,\n        \"total_budget\": zakated.balance,\n        recurring_expenses\n    };\n}\n\nexport default function FinancialTable() {\n    const classes = useStyles();\n    const [showAddDialog, setShowAddDialog] = useState(false);\n    const [rows, setRows] = useState([]);\n\n    const handleClickOpen = () => {\n        setShowAddDialog(true);\n    };\n    const handleClose = () => {\n        setShowAddDialog(false);\n    };\n    const handleAdd = () => {\n        let goal = document.getElementById(\"goal\").value;\n        let hasRecurringExpenses = document.getElementById(\"hasRecurringExpenses\").checked;\n        let row = createData({hasRecurringExpenses, goal, monthly_budget: 0, in_years: 0});\n        rows.push(row);\n        handleClose();\n    }\n    const onRowUpdate = (newValue, changedIndex, changedCell) => {\n        setRows(rows.map((row, index) => {\n            if (index !== changedIndex) return row;\n            row[changedCell] = (newValue || row[changedCell]);\n            return createData({...row});\n        }));\n    };\n\n    return (\n        <Fragment>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"goals table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell/>\n                            <TableCell>Goal</TableCell>\n                            <TableCell align=\"left\">Monthly Budget</TableCell>\n                            <TableCell align=\"left\">Achieve in Years</TableCell>\n                            <TableCell align=\"right\">Zakat</TableCell>\n                            <TableCell align=\"right\">Total Budget</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map((row, index) =>\n                            <FinancialTableRow key={index} row={row} index={index} onRowUpdate={onRowUpdate}/>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Dialog open={showAddDialog} onClose={handleClose} aria-labelledby=\"add-goal\">\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        id=\"goal\"\n                        label=\"Goal\"\n                        type=\"text\"\n                        fullWidth\n                    />\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                id=\"hasRecurringExpenses\"\n                                name=\"hasRecurringExpenses\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Has Recurring Expenses\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleAdd} color=\"primary\">\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Fab color=\"primary\" aria-label=\"add\" className={classes.fab} onClick={handleClickOpen}>\n                <AddIcon/>\n            </Fab>\n        </Fragment>\n    );\n}\n","import FinancialTable from \"./financial_table/financial_table\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FinancialTable></FinancialTable>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}